diff --git a/boost/assert/source_location.hpp b/boost/assert/source_location.hpp
index dd1cfd73d..af2c35950 100644
--- a/boost/assert/source_location.hpp
+++ b/boost/assert/source_location.hpp
@@ -1,6 +1,10 @@
 #ifndef BOOST_ASSERT_SOURCE_LOCATION_HPP_INCLUDED
 #define BOOST_ASSERT_SOURCE_LOCATION_HPP_INCLUDED
 
+#define BOOST_DISABLE_CURRENT_LOCATION
+// NVCC hasn't __builtin_FILE, __builtin_LINE, __builtin_FUNCTION and __builtin_COLUMN.
+// Disable current location to avoid use these macro
+
 // http://www.boost.org/libs/assert
 //
 // Copyright 2019, 2021 Peter Dimov
diff --git a/boost/crc.hpp b/boost/crc.hpp
index edd66b0da..2178b0ff6 100644
--- a/boost/crc.hpp
+++ b/boost/crc.hpp
@@ -36,6 +36,7 @@
 #ifndef BOOST_CRC_HPP
 #define BOOST_CRC_HPP
 
+#include <cstdio>
 #include <boost/array.hpp>           // for boost::array
 #include <boost/config.hpp>          // for BOOST_STATIC_CONSTANT, etc.
 #include <boost/cstdint.hpp>         // for UINTMAX_C, boost::uintmax_t
@@ -1245,7 +1246,12 @@ namespace detail
 
                 // Complete the multi-bit reflected altered modulo-2 polynomial
                 // division
+#pragma clang diagnostic push
+#pragma clang diagnostic ignored "-Wshift-count-overflow"
                 remainder >>= CHAR_BIT;
+#pragma clang diagnostic pop
+               // The width of remainder maybe equal to CHAR_BIT. It will cause an undefined behavior (at least in c++17).
+               // But in the current compile environment this didn't cause problems, so just ignores warning.
                 remainder ^= table.elems[ index ];
             }
 
diff --git a/boost/endian/arithmetic.hpp b/boost/endian/arithmetic.hpp
index 062d8ce96..6845dbde6 100644
--- a/boost/endian/arithmetic.hpp
+++ b/boost/endian/arithmetic.hpp
@@ -28,6 +28,7 @@
 #endif
 
 #include <boost/endian/buffers.hpp>
+#include <boost/endian/conversion.hpp>
 #include <boost/core/scoped_enum.hpp>
 #include <boost/static_assert.hpp>
 #include <boost/cstdint.hpp>
diff --git a/boost/math/tools/polynomial.hpp b/boost/math/tools/polynomial.hpp
index c2528b1da..b32c382ed 100644
--- a/boost/math/tools/polynomial.hpp
+++ b/boost/math/tools/polynomial.hpp
@@ -661,7 +661,7 @@ template <class T>
 inline polynomial<T> operator + (polynomial<T>&& a, polynomial<T>&& b)
 {
    a += b;
-   return a;
+   return std::move(a);
 }
 
 template <class T>
@@ -676,7 +676,7 @@ template <class T>
 inline polynomial<T> operator - (polynomial<T>&& a, const polynomial<T>& b)
 {
    a -= b;
-   return a;
+   return std::move(a);
 }
 template <class T>
 inline polynomial<T> operator - (const polynomial<T>& a, polynomial<T>&& b)
@@ -688,7 +688,7 @@ template <class T>
 inline polynomial<T> operator - (polynomial<T>&& a, polynomial<T>&& b)
 {
    a -= b;
-   return a;
+   return std::move(a);
 }
 
 template <class T>
diff --git a/boost/range.hpp b/boost/range.hpp
index 179ae2249..c2b7f6b4d 100644
--- a/boost/range.hpp
+++ b/boost/range.hpp
@@ -15,6 +15,7 @@
 # pragma once
 #endif
 
+#include <boost/range/combine.hpp>
 #include <boost/range/functions.hpp>
 #include <boost/range/metafunctions.hpp>
 #include <boost/range/iterator_range.hpp>
diff --git a/libs/atomic/src/lock_pool.cpp b/libs/atomic/src/lock_pool.cpp
index 742433899..4a4162cb7 100644
--- a/libs/atomic/src/lock_pool.cpp
+++ b/libs/atomic/src/lock_pool.cpp
@@ -1113,9 +1113,9 @@ static padded_lock_state_t g_lock_pool[lock_pool_size] =
 #if (BOOST_ATOMIC_DETAIL_LOCK_POOL_SIZE / 256u) > BOOST_PP_LIMIT_ITERATION
 #error "Boost.Atomic: BOOST_ATOMIC_LOCK_POOL_SIZE_LOG2 macro value is too large"
 #endif
-#define BOOST_PP_ITERATION_PARAMS_1 (3, (1, (BOOST_ATOMIC_DETAIL_LOCK_POOL_SIZE / 256u), "lock_pool_init256.ipp"))
+#define BOOST_PP_ITERATION_PARAMS_1 (3, (1, (BOOST_ATOMIC_DETAIL_LOCK_POOL_SIZE / 256u), "libs/atomic/src/lock_pool_init256.ipp"))
 #else // BOOST_ATOMIC_DETAIL_LOCK_POOL_SIZE > 256u
-#define BOOST_PP_ITERATION_PARAMS_1 (3, (1, BOOST_ATOMIC_DETAIL_LOCK_POOL_SIZE, "lock_pool_init1.ipp"))
+#define BOOST_PP_ITERATION_PARAMS_1 (3, (1, BOOST_ATOMIC_DETAIL_LOCK_POOL_SIZE, "libs/atomic/src/lock_pool_init1.ipp"))
 #endif // BOOST_ATOMIC_DETAIL_LOCK_POOL_SIZE > 256u
 #include BOOST_PP_ITERATE()
 #undef BOOST_PP_ITERATION_PARAMS_1
 